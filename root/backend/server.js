const express = require('express');
const multer = require('multer'); // Para lidar com upload de arquivos (hist√≥rico)
const nodemailer = require('nodemailer'); // Para envio de e-mails
const bcrypt = require('bcryptjs'); // Para criptografia de senhas
const crypto = require('crypto'); // Para gerar tokens de recupera√ß√£o de senha (nativo do Node.js)

const mongoose = require('mongoose');
const path = require('path');
const cors = require('cors'); // Para permitir requisi√ß√µes de origens diferentes

// Importa os modelos do MongoDB
const Notificacao = require('./models/Notificacao');
const HistoricoSaude = require('./models/HistoricoSaude');
const User = require('./models/User'); // Model de usu√°rio

require('dotenv').config(); // Carrega as vari√°veis de ambiente do arquivo .env

const app = express();
const port = process.env.PORT || 3000; // Porta do servidor, padr√£o 3000

// Configura√ß√£o do transportador de e-mail (usando Gmail como exemplo)
const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: process.env.EMAIL_USER, // Seu e-mail Gmail (do .env)
        pass: process.env.EMAIL_PASS, // Sua SENHA DE APLICATIVO DO GMAIL (do .env)
    },
});

// Conex√£o com MongoDB
mongoose.connect(process.env.MONGODB_URI, {
    // useNewUrlParser: true,  // Removidas: op√ß√µes depreciadas para vers√µes recentes do driver
    // useUnifiedTopology: true, // Removidas: op√ß√µes depreciadas para vers√µes recentes do driver
})
.then(() => console.log('‚úÖ Conectado ao MongoDB'))
.catch((err) => console.error('‚ùå Erro ao conectar ao MongoDB:', err));

// Middlewares
app.use(cors()); // Permite requisi√ß√µes de diferentes origens (frontend)
app.use(express.json()); // Habilita o Express a lidar com JSON no corpo das requisi√ß√µes

// =========================================================
// SERVIR ARQUIVOS EST√ÅTICOS E ROTAS DE P√ÅGINAS DO FRONTEND
// (AJUSTADO PARA A ESTRUTURA: root/frontend/public E root/frontend/src)
// =========================================================

// Caminho para a pasta 'src' do frontend (cont√©m pages, js, css)
const frontendSrcPath = path.resolve(__dirname, '..', '..', 'root', 'frontend', 'src');
app.use(express.static(frontendSrcPath)); // Serve todos os arquivos de 'src'

// Caminho para a pasta 'public' do frontend (cont√©m index.html)
const frontendPublicPath = path.resolve(__dirname, '..', '..', 'root', 'frontend', 'public');
app.use(express.static(frontendPublicPath)); // Serve todos os arquivos de 'public'


// Rotas para as p√°ginas HTML (agora apontando para os caminhos corretos)
// A rota raiz '/' servir√° o index.html
app.get('/', (req, res) => {
    res.sendFile(path.join(frontendPublicPath, 'index.html'));
});

// Outras rotas GET para p√°ginas (HTMLs dentro de src/pages)
app.get('/cadastro', (req, res) => {
    res.sendFile(path.join(frontendSrcPath, 'pages', 'cadastro.html'));
});

app.get('/login', (req, res) => { // Rota /login para ser acessada diretamente
    res.sendFile(path.join(frontendSrcPath, 'pages', 'login.html'));
});

app.get('/home', (req, res) => {
    res.sendFile(path.join(frontendSrcPath, 'pages', 'home.html'));
});
app.get('/notificacoes', (req, res) => {
    res.sendFile(path.join(frontendSrcPath, 'pages', 'notificacoes.html'));
});
app.get('/historico', (req, res) => {
    res.sendFile(path.join(frontendSrcPath, 'pages', 'historico.html'));
});
app.get('/configuracoes', (req, res) => {
    res.sendFile(path.join(frontendSrcPath, 'pages', 'configuracoes.html'));
});
app.get('/reset-password', (req, res) => {
    res.sendFile(path.join(frontendSrcPath, 'pages', 'reset-password.html'));
});
app.get('/politica-privacidade', (req, res) => {
    res.sendFile(path.join(frontendSrcPath, 'pages', 'politica-privacidade.html'));
});
app.get('/sobre', (req, res) => {
    res.sendFile(path.join(frontendSrcPath, 'pages', 'sobre.html'));
});

// ===========================================
// FIM DAS ROTAS DE SERVIR ARQUIVOS DO FRONTEND
// ===========================================


// ===========================================
// ROTAS DA API (CRUD e Autentica√ß√£o)
// ===========================================

// Rota de cadastro (POST)
app.post('/api/cadastro', async (req, res) => {
    try {
        const { nome, email, celular, password } = req.body;

        if (!nome || !email || !celular || !password) {
            return res.status(400).json({ message: 'Preencha todos os campos.' });
        }

        const existente = await User.findOne({ email });
        if (existente) {
            return res.status(409).json({ message: 'Email j√° cadastrado.' });
        }

        const hashedPassword = await bcrypt.hash(password, 10);

        const novoUsuario = new User({ nome, email, celular, password: hashedPassword });
        await novoUsuario.save();

        res.status(201).json({ message: 'Cadastro realizado com sucesso!' });
    } catch (error) {
        console.error('‚ùå Erro no cadastro:', error.message);
        res.status(500).json({ message: 'Erro interno no servidor.' });
    }
});

// Rota de login (POST)
app.post('/api/login', async (req, res) => {
    try {
        const { email, password } = req.body;

        if (!email || !password) {
            return res.status(400).json({ message: 'Email e senha s√£o obrigat√≥rios.' });
        }

        const user = await User.findOne({ email });

        if (!user) {
            return res.status(404).json({ message: 'Usu√°rio n√£o encontrado.' });
        }

        const isMatch = await bcrypt.compare(password, user.password);

        if (!isMatch) {
            return res.status(401).json({ message: 'Senha incorreta.' });
        }

        const userSemSenha = {
            _id: user._id,
            nome: user.nome,
            email: user.email,
            celular: user.celular
        };

        res.status(200).json({ message: 'Login realizado com sucesso!', user: userSemSenha });
    } catch (error) {
        console.error('‚ùå Erro no login:', error.message);
        res.status(500).json({ message: 'Erro interno no servidor.' });
    }
});

// Rota para CRIAR uma nova notifica√ß√£o (POST)
app.post('/api/notificacoes', async (req, res) => {
    try {
        const { data, tipo, descricao, horario, usuario, emailUsuario } = req.body;

        if (!usuario) {
            return res.status(400).json({ message: 'ID do usu√°rio √© obrigat√≥rio para criar notifica√ß√£o.' });
        }

        const novaNotificacao = new Notificacao({
            data,
            tipo,
            descricao,
            horario,
            usuario: usuario
        });

        await novaNotificacao.save();

        if (emailUsuario) {
            const mailOptions = {
                from: process.env.EMAIL_USER,
                to: emailUsuario,
                subject: `+SA√öDE: Nova Notifica√ß√£o - ${tipo} em ${data}`,
                html: `
                    <p>Ol√°,</p>
                    <p>Voc√™ tem uma nova notifica√ß√£o do +SA√öDE:</p>
                    <ul>
                        <li><strong>Tipo:</strong> ${tipo}</li>
                        <li><strong>Descri√ß√£o:</strong> ${descricao}</li>
                        <li><strong>Data:</strong> ${data}</li>
                        <li><strong>Hor√°rio:</strong> ${horario}</li>
                    </ul>
                    <p>Lembre-se de verificar suas notifica√ß√µes no aplicativo!</p>
                    <p>Atenciosamente,<br>Equipe +SA√öDE</p>
                `,
            };

            try {
                await transporter.sendMail(mailOptions);
                console.log(`üìß E-mail de notifica√ß√£o enviado para: ${emailUsuario}`);
            } catch (emailError) {
                console.error('‚ùå Erro ao enviar e-mail de notifica√ß√£o:', emailError);
            }
        }

        res.status(201).json({ message: 'Notifica√ß√£o criada com sucesso!' });
    } catch (error) {
        console.error('‚ùå Erro ao criar notifica√ß√£o:', error);
        res.status(500).json({ message: 'Erro interno ao criar notifica√ß√£o.', error: error.message });
    }
});

// Rota para ATUALIZAR uma notifica√ß√£o existente (PUT)
app.put('/api/notificacoes/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const { data, tipo, descricao, horario, usuario, emailUsuario } = req.body;

        if (!id || !usuario) {
            return res.status(400).json({ message: 'ID da notifica√ß√£o e do usu√°rio s√£o obrigat√≥rios para atualizar.' });
        }

        const notificacaoAtualizada = await Notificacao.findOneAndUpdate(
            { _id: id, usuario: usuario },
            { data, tipo, descricao, horario },
            { new: true }
        );

        if (!notificacaoAtualizada) {
            return res.status(404).json({ message: 'Notifica√ß√£o n√£o encontrada ou n√£o pertence a este usu√°rio.' });
        }

        res.status(200).json({ message: 'Notifica√ß√£o atualizada com sucesso!', notificacao: notificacaoAtualizada });
    } catch (error) {
        console.error('‚ùå Erro ao atualizar notifica√ß√£o:', error);
        res.status(500).json({ message: 'Erro interno ao atualizar notifica√ß√£o.', error: error.message });
    }
});

const storage = multer.memoryStorage();
const upload = multer({ storage });

// Rota para salvar hist√≥rico de sa√∫de (POST)
app.post('/api/historico', upload.array('arquivos'), async (req, res) => {
    try {
        const { tipoSanguineo, doencas, alergias, medicamentos, emailUsuario, usuarioId } = req.body;

        const usuario = await User.findOne({ email: emailUsuario });

        if (!usuario || String(usuario._id) !== String(usuarioId)) {
            return res.status(404).json({ message: 'Usu√°rio n√£o encontrado ou ID de usu√°rio inv√°lido.' });
        }

        const arquivos = req.files ? req.files.map(file => ({
            nome: file.originalname,
            tipo: file.mimetype,
            dados: file.buffer
        })) : [];

        const historicoExistente = await HistoricoSaude.findOne({ usuario: usuario._id });

        if (historicoExistente) {
            historicoExistente.tipoSanguineo = tipoSanguineo;
            historicoExistente.doencas = doencas;
            historicoExistente.alergias = alergias;
            historicoExistente.medicamentos = medicamentos;
            if (arquivos.length > 0) {
                historicoExistente.arquivos = arquivos;
            }
            await historicoExistente.save();
            res.status(200).json({ message: 'Hist√≥rico de sa√∫de atualizado com sucesso!' });
        } else {
            const historico = new HistoricoSaude({
                usuario: usuario._id,
                tipoSanguineo,
                doencas,
                alergias,
                medicamentos,
                arquivos
            });
            await historico.save();
            res.status(201).json({ message: 'Hist√≥rico de sa√∫de salvo com sucesso!' });
        }
    } catch (err) {
        console.error('‚ùå Erro ao salvar hist√≥rico:', err);
        res.status(500).json({ message: 'Erro ao salvar hist√≥rico.' });
    }
});

app.get('/api/notificacoes', async (req, res) => {
    try {
        const email = req.query.email;
        if (!email) return res.status(400).json({ message: 'Email √© obrigat√≥rio.' });

        const usuario = await User.findOne({ email });
        if (!usuario) return res.status(404).json({ message: 'Usu√°rio n√£o encontrado.' });

        const notificacoes = await Notificacao.find({ usuario: usuario._id }).sort({ data: -1 });
        res.json(notificacoes);
    } catch (error) {
        console.error('‚ùå Erro ao buscar notifica√ß√µes:', error);
        res.status(500).json({ message: 'Erro interno ao buscar notifica√ß√µes.' });
    }
});

app.get('/api/historico', async (req, res) => {
    try {
        const email = req.query.email;
        if (!email) return res.status(400).json({ message: 'Email √© obrigat√≥rio.' });

        const usuario = await User.findOne({ email });
        if (!usuario) return res.status(404).json({ message: 'Usu√°rio n√£o encontrado.' });

        const historico = await HistoricoSaude.findOne({ usuario: usuario._id }).populate('usuario', 'nome email');
        res.json(historico);
    } catch (error) {
        console.error('‚ùå Erro ao buscar hist√≥rico de sa√∫de:', error);
        res.status(500).json({ message: 'Erro interno ao buscar hist√≥rico de sa√∫de.' });
    }
});

app.delete('/api/notificacoes/:id', async (req, res) => {
    try {
        const id = req.params.id;
        await Notificacao.findByIdAndDelete(id);
        res.json({ message: 'Notifica√ß√£o exclu√≠da com sucesso.' });
    } catch (error) {
        console.error('‚ùå Erro ao excluir notifica√ß√£o:', error);
        res.status(500).json({ message: 'Erro ao excluir notifica√ß√£o.' });
    }
});

app.delete('/api/historico/:id', async (req, res) => {
    try {
        const id = req.params.id;
        await HistoricoSaude.findByIdAndDelete(id);
        res.json({ message: 'Hist√≥rico de sa√∫de exclu√≠do com sucesso.' });
    } catch (error) {
        console.error('‚ùå Erro ao excluir hist√≥rico:', error);
        res.status(500).json({ message: 'Erro ao excluir hist√≥rico de sa√∫de.' });
    }
});

app.put('/api/usuario/:id', async (req, res) => {
    const { id } = req.params;
    const { nome, email, celular, senhaAtual, password: novaSenha } = req.body;

    try {
        const user = await User.findById(id);
        if (!user) {
            return res.status(404).json({ message: 'Usu√°rio n√£o encontrado.' });
        }

        if (senhaAtual) {
            const isMatch = await bcrypt.compare(senhaAtual, user.password);
            if (!isMatch) {
                return res.status(401).json({ message: 'Senha atual incorreta.' });
            }
        } else if (novaSenha) {
            return res.status(400).json({ message: 'Senha atual √© obrigat√≥ria para alterar a senha.' });
        }

        const updates = {};
        if (nome) updates.nome = nome;
        if (email) updates.email = email;
        if (celular) updates.celular = celular;
        if (novaSenha) {
            updates.password = await bcrypt.hash(novaSenha, 10);
        }

        const usuarioAtualizado = await User.findByIdAndUpdate(id, updates, { new: true });

        const userSemSenha = {
            _id: usuarioAtualizado._id,
            nome: usuarioAtualizado.nome,
            email: usuarioAtualizado.email,
            celular: usuarioAtualizado.celular
        };

        res.json({ message: 'Usu√°rio atualizado com sucesso.', usuario: userSemSenha });
    } catch (error) {
        console.error('‚ùå Erro ao atualizar usu√°rio:', error);
        res.status(500).json({ message: 'Erro interno ao atualizar usu√°rio.' });
    }
});

app.delete('/api/usuario/:id', async (req, res) => {
    const { id } = req.params;

    try {
        await Notificacao.deleteMany({ usuario: id });
        await HistoricoSaude.deleteMany({ usuario: id });

        const usuarioDeletado = await User.findByIdAndDelete(id);
        if (!usuarioDeletado) return res.status(404).json({ message: 'Usu√°rio n√£o encontrado.' });

        res.json({ message: 'Usu√°rio deletado com sucesso.' });
    } catch (error) {
        console.error('‚ùå Erro ao deletar usu√°rio:', error);
        res.status(500).json({ message: 'Erro interno ao deletar usu√°rio.' });
    }
});

app.post('/api/forgot-password', async (req, res) => {
    try {
        const { email } = req.body;
        const user = await User.findOne({ email });

        if (!user) {
            return res.status(200).json({ message: 'Se o email estiver cadastrado, um link de recupera√ß√£o ser√° enviado.' });
        }

        const resetToken = crypto.randomBytes(32).toString('hex');
        user.resetPasswordToken = resetToken;
        user.resetPasswordExpires = Date.now() + 3600000;
        await user.save();

        const resetLink = `https://MayaraSousaSilva.github.io/Projeto-Integrador/src/pages/reset-password.html?token=${resetToken}`;

        const mailOptions = {
            from: process.env.EMAIL_USER,
            to: user.email,
            subject: '+SA√öDE: Redefini√ß√£o de Senha',
            html: `
                <p>Ol√°,</p>
                <p>Voc√™ solicitou a redefini√ß√£o de senha para sua conta +SA√öDE.</p>
                <p>Por favor, clique no link abaixo para redefinir sua senha:</p>
                <p><a href="${resetLink}">Redefinir Senha</a></p>
                <p>Este link √© v√°lido por 1 hora.</p>
                <p>Se voc√™ n√£o solicitou isso, por favor, ignore este e-mail.</p>
                <p>Atenciosamente,<br>Equipe +SA√öDE</p>
            `,
        };

        await transporter.sendMail(mailOptions);
        console.log(`üìß E-mail de recupera√ß√£o enviado para: ${user.email}`);
        res.status(200).json({ message: 'Se o email estiver cadastrado, um link de recupera√ß√£o ser√° enviado.' });

    } catch (error) {
        console.error('‚ùå Erro ao solicitar recupera√ß√£o de senha:', error);
        res.status(500).json({ message: 'Erro interno ao solicitar recupera√ß√£o de senha.' });
    }
});

app.post('/api/reset-password/:token', async (req, res) => {
    try {
        const { token } = req.params;
        const { newPassword } = req.body;

        if (!newPassword || newPassword.length < 6) {
            return res.status(400).json({ message: 'A nova senha deve ter pelo menos 6 caracteres e n√£o pode ser vazia.' });
        }

        const user = await User.findOne({
            resetPasswordToken: token,
            resetPasswordExpires: { $gt: Date.now() }
        });

        if (!user) {
            return res.status(400).json({ message: 'Token de redefini√ß√£o de senha inv√°lido ou expirado.' });
        }

        const hashedPassword = await bcrypt.hash(newPassword, 10);
        user.password = hashedPassword;
        user.resetPasswordToken = undefined;
        user.resetPasswordExpires = undefined;
        await user.save();

        res.status(200).json({ message: 'Senha redefinida com sucesso! Voc√™ j√° pode fazer login.' });

    } catch (error) {
        console.error('‚ùå Erro ao redefinir senha:', error);
        res.status(500).json({ message: 'Erro interno ao redefinir senha.' });
    }
});


app.listen(port, () => {
    console.log(`üöÄ Servidor rodando em http://localhost:${port}`);
});